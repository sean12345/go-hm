// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package auction

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Code
//  - Message
type InvalidException struct {
	Code    int32  `thrift:"code,1" json:"code"`
	Message string `thrift:"message,2" json:"message"`
}

func NewInvalidException() *InvalidException {
	return &InvalidException{}
}

func (p *InvalidException) GetCode() int32 {
	return p.Code
}

func (p *InvalidException) GetMessage() string {
	return p.Message
}
func (p *InvalidException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *InvalidException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *InvalidException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *InvalidException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidException(%+v)", *p)
}

func (p *InvalidException) Error() string {
	return p.String()
}

// Attributes:
//  - OrderId
//  - SceneId
//  - BiddingStartTime
//  - BiddingEndTime
//  - EstElapsedTime
//  - ActElapsedTime
//  - IsTimingOrder
type Scene struct {
	OrderId          int64  `thrift:"orderId,1" json:"orderId"`
	SceneId          int64  `thrift:"sceneId,2" json:"sceneId"`
	BiddingStartTime string `thrift:"biddingStartTime,3" json:"biddingStartTime"`
	BiddingEndTime   string `thrift:"biddingEndTime,4" json:"biddingEndTime"`
	EstElapsedTime   int64  `thrift:"estElapsedTime,5" json:"estElapsedTime"`
	ActElapsedTime   int64  `thrift:"actElapsedTime,6" json:"actElapsedTime"`
	IsTimingOrder    bool   `thrift:"isTimingOrder,7" json:"isTimingOrder"`
}

func NewScene() *Scene {
	return &Scene{}
}

func (p *Scene) GetOrderId() int64 {
	return p.OrderId
}

func (p *Scene) GetSceneId() int64 {
	return p.SceneId
}

func (p *Scene) GetBiddingStartTime() string {
	return p.BiddingStartTime
}

func (p *Scene) GetBiddingEndTime() string {
	return p.BiddingEndTime
}

func (p *Scene) GetEstElapsedTime() int64 {
	return p.EstElapsedTime
}

func (p *Scene) GetActElapsedTime() int64 {
	return p.ActElapsedTime
}

func (p *Scene) GetIsTimingOrder() bool {
	return p.IsTimingOrder
}
func (p *Scene) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Scene) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *Scene) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SceneId = v
	}
	return nil
}

func (p *Scene) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BiddingStartTime = v
	}
	return nil
}

func (p *Scene) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BiddingEndTime = v
	}
	return nil
}

func (p *Scene) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.EstElapsedTime = v
	}
	return nil
}

func (p *Scene) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ActElapsedTime = v
	}
	return nil
}

func (p *Scene) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsTimingOrder = v
	}
	return nil
}

func (p *Scene) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Scene"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Scene) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *Scene) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sceneId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sceneId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SceneId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sceneId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sceneId: ", p), err)
	}
	return err
}

func (p *Scene) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("biddingStartTime", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:biddingStartTime: ", p), err)
	}
	if err := oprot.WriteString(string(p.BiddingStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.biddingStartTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:biddingStartTime: ", p), err)
	}
	return err
}

func (p *Scene) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("biddingEndTime", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:biddingEndTime: ", p), err)
	}
	if err := oprot.WriteString(string(p.BiddingEndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.biddingEndTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:biddingEndTime: ", p), err)
	}
	return err
}

func (p *Scene) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estElapsedTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:estElapsedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EstElapsedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estElapsedTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:estElapsedTime: ", p), err)
	}
	return err
}

func (p *Scene) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actElapsedTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:actElapsedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ActElapsedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.actElapsedTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:actElapsedTime: ", p), err)
	}
	return err
}

func (p *Scene) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isTimingOrder", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isTimingOrder: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsTimingOrder)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isTimingOrder (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isTimingOrder: ", p), err)
	}
	return err
}

func (p *Scene) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Scene(%+v)", *p)
}

// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bail

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BailService interface {
	// Parameters:
	//  - DealerId
	GetDealerBail(dealerId int64) (r *Bail, err error)
	// Parameters:
	//  - DealerId
	//  - Amount
	//  - OrderId
	FreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error)
	// Parameters:
	//  - DealerId
	//  - Amount
	//  - OrderId
	UnfreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error)
	// Parameters:
	//  - DealerId
	//  - Amount
	DecBail(dealerId int64, amount float64) (r *Bail, err error)
	// Parameters:
	//  - DealerId
	//  - Amount
	IncBail(dealerId int64, amount float64) (r *Bail, err error)
}

type BailServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBailServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BailServiceClient {
	return &BailServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBailServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BailServiceClient {
	return &BailServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - DealerId
func (p *BailServiceClient) GetDealerBail(dealerId int64) (r *Bail, err error) {
	if err = p.sendGetDealerBail(dealerId); err != nil {
		return
	}
	return p.recvGetDealerBail()
}

func (p *BailServiceClient) sendGetDealerBail(dealerId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDealerBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceGetDealerBailArgs{
		DealerId: dealerId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvGetDealerBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDealerBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDealerBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDealerBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDealerBail failed: invalid message type")
		return
	}
	result := BailServiceGetDealerBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - Amount
//  - OrderId
func (p *BailServiceClient) FreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error) {
	if err = p.sendFreezeBail(dealerId, amount, orderId); err != nil {
		return
	}
	return p.recvFreezeBail()
}

func (p *BailServiceClient) sendFreezeBail(dealerId int64, amount float64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("freezeBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceFreezeBailArgs{
		DealerId: dealerId,
		Amount:   amount,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvFreezeBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "freezeBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "freezeBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "freezeBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "freezeBail failed: invalid message type")
		return
	}
	result := BailServiceFreezeBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - Amount
//  - OrderId
func (p *BailServiceClient) UnfreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error) {
	if err = p.sendUnfreezeBail(dealerId, amount, orderId); err != nil {
		return
	}
	return p.recvUnfreezeBail()
}

func (p *BailServiceClient) sendUnfreezeBail(dealerId int64, amount float64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unfreezeBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceUnfreezeBailArgs{
		DealerId: dealerId,
		Amount:   amount,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvUnfreezeBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unfreezeBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unfreezeBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unfreezeBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unfreezeBail failed: invalid message type")
		return
	}
	result := BailServiceUnfreezeBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - Amount
func (p *BailServiceClient) DecBail(dealerId int64, amount float64) (r *Bail, err error) {
	if err = p.sendDecBail(dealerId, amount); err != nil {
		return
	}
	return p.recvDecBail()
}

func (p *BailServiceClient) sendDecBail(dealerId int64, amount float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceDecBailArgs{
		DealerId: dealerId,
		Amount:   amount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvDecBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "decBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "decBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decBail failed: invalid message type")
		return
	}
	result := BailServiceDecBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - Amount
func (p *BailServiceClient) IncBail(dealerId int64, amount float64) (r *Bail, err error) {
	if err = p.sendIncBail(dealerId, amount); err != nil {
		return
	}
	return p.recvIncBail()
}

func (p *BailServiceClient) sendIncBail(dealerId int64, amount float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceIncBailArgs{
		DealerId: dealerId,
		Amount:   amount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvIncBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incBail failed: invalid message type")
		return
	}
	result := BailServiceIncBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type BailServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BailService
}

func (p *BailServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BailServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BailServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBailServiceProcessor(handler BailService) *BailServiceProcessor {

	self10 := &BailServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self10.processorMap["getDealerBail"] = &bailServiceProcessorGetDealerBail{handler: handler}
	self10.processorMap["freezeBail"] = &bailServiceProcessorFreezeBail{handler: handler}
	self10.processorMap["unfreezeBail"] = &bailServiceProcessorUnfreezeBail{handler: handler}
	self10.processorMap["decBail"] = &bailServiceProcessorDecBail{handler: handler}
	self10.processorMap["incBail"] = &bailServiceProcessorIncBail{handler: handler}
	return self10
}

func (p *BailServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x11.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x11

}

type bailServiceProcessorGetDealerBail struct {
	handler BailService
}

func (p *bailServiceProcessorGetDealerBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceGetDealerBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDealerBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceGetDealerBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.GetDealerBail(args.DealerId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDealerBail: "+err2.Error())
			oprot.WriteMessageBegin("getDealerBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDealerBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorFreezeBail struct {
	handler BailService
}

func (p *bailServiceProcessorFreezeBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceFreezeBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("freezeBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceFreezeBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.FreezeBail(args.DealerId, args.Amount, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing freezeBail: "+err2.Error())
			oprot.WriteMessageBegin("freezeBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("freezeBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorUnfreezeBail struct {
	handler BailService
}

func (p *bailServiceProcessorUnfreezeBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceUnfreezeBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unfreezeBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceUnfreezeBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.UnfreezeBail(args.DealerId, args.Amount, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfreezeBail: "+err2.Error())
			oprot.WriteMessageBegin("unfreezeBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("unfreezeBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorDecBail struct {
	handler BailService
}

func (p *bailServiceProcessorDecBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceDecBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("decBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceDecBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.DecBail(args.DealerId, args.Amount); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decBail: "+err2.Error())
			oprot.WriteMessageBegin("decBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("decBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorIncBail struct {
	handler BailService
}

func (p *bailServiceProcessorIncBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceIncBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceIncBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.IncBail(args.DealerId, args.Amount); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incBail: "+err2.Error())
			oprot.WriteMessageBegin("incBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("incBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - DealerId
type BailServiceGetDealerBailArgs struct {
	DealerId int64 `thrift:"dealerId,1" json:"dealerId"`
}

func NewBailServiceGetDealerBailArgs() *BailServiceGetDealerBailArgs {
	return &BailServiceGetDealerBailArgs{}
}

func (p *BailServiceGetDealerBailArgs) GetDealerId() int64 {
	return p.DealerId
}
func (p *BailServiceGetDealerBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDealerBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceGetDealerBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetDealerBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceGetDealerBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceGetDealerBailResult() *BailServiceGetDealerBailResult {
	return &BailServiceGetDealerBailResult{}
}

var BailServiceGetDealerBailResult_Success_DEFAULT *Bail

func (p *BailServiceGetDealerBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceGetDealerBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceGetDealerBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceGetDealerBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceGetDealerBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceGetDealerBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceGetDealerBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceGetDealerBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDealerBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetDealerBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetDealerBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetDealerBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
//  - OrderId
type BailServiceFreezeBailArgs struct {
	DealerId int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
	OrderId  int64   `thrift:"orderId,3" json:"orderId"`
}

func NewBailServiceFreezeBailArgs() *BailServiceFreezeBailArgs {
	return &BailServiceFreezeBailArgs{}
}

func (p *BailServiceFreezeBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceFreezeBailArgs) GetAmount() float64 {
	return p.Amount
}

func (p *BailServiceFreezeBailArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *BailServiceFreezeBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freezeBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceFreezeBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceFreezeBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceFreezeBailResult() *BailServiceFreezeBailResult {
	return &BailServiceFreezeBailResult{}
}

var BailServiceFreezeBailResult_Success_DEFAULT *Bail

func (p *BailServiceFreezeBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceFreezeBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceFreezeBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceFreezeBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceFreezeBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceFreezeBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceFreezeBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceFreezeBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freezeBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceFreezeBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceFreezeBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceFreezeBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
//  - OrderId
type BailServiceUnfreezeBailArgs struct {
	DealerId int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
	OrderId  int64   `thrift:"orderId,3" json:"orderId"`
}

func NewBailServiceUnfreezeBailArgs() *BailServiceUnfreezeBailArgs {
	return &BailServiceUnfreezeBailArgs{}
}

func (p *BailServiceUnfreezeBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceUnfreezeBailArgs) GetAmount() float64 {
	return p.Amount
}

func (p *BailServiceUnfreezeBailArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *BailServiceUnfreezeBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceUnfreezeBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceUnfreezeBailResult() *BailServiceUnfreezeBailResult {
	return &BailServiceUnfreezeBailResult{}
}

var BailServiceUnfreezeBailResult_Success_DEFAULT *Bail

func (p *BailServiceUnfreezeBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceUnfreezeBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceUnfreezeBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceUnfreezeBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceUnfreezeBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceUnfreezeBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceUnfreezeBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceUnfreezeBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
type BailServiceDecBailArgs struct {
	DealerId int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
}

func NewBailServiceDecBailArgs() *BailServiceDecBailArgs {
	return &BailServiceDecBailArgs{}
}

func (p *BailServiceDecBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceDecBailArgs) GetAmount() float64 {
	return p.Amount
}
func (p *BailServiceDecBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceDecBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceDecBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceDecBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceDecBailResult() *BailServiceDecBailResult {
	return &BailServiceDecBailResult{}
}

var BailServiceDecBailResult_Success_DEFAULT *Bail

func (p *BailServiceDecBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceDecBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceDecBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceDecBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceDecBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceDecBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceDecBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceDecBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceDecBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceDecBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceDecBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceDecBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
type BailServiceIncBailArgs struct {
	DealerId int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
}

func NewBailServiceIncBailArgs() *BailServiceIncBailArgs {
	return &BailServiceIncBailArgs{}
}

func (p *BailServiceIncBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceIncBailArgs) GetAmount() float64 {
	return p.Amount
}
func (p *BailServiceIncBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceIncBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceIncBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceIncBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceIncBailResult() *BailServiceIncBailResult {
	return &BailServiceIncBailResult{}
}

var BailServiceIncBailResult_Success_DEFAULT *Bail

func (p *BailServiceIncBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceIncBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceIncBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceIncBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceIncBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceIncBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceIncBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceIncBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceIncBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceIncBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceIncBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceIncBailResult(%+v)", *p)
}
